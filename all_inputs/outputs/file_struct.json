{
    "dynamic-pricing-v4": {
        "dl_target_curves_vw.sql": "CREATE OR REPLACE VIEW \"dl_target_curves_vw\" AS\nWITH\n    valid_rl_target_curves\n    AS\n    (\n        SELECT\n            target_key\n    , load_name\n    , load_timestamp\n    , extreme_lower\n    , mid_lower\n    , mid_upper\n    , extreme_upper\n    , expectedlf_rescaled\n    , (CASE WHEN (length(load_timestamp) = 11) THEN load_timestamp ELSE substring(load_timestamp, 3) END) valid_load_timestamp\n        FROM\n            rl_target_curves\n    )\n,\n    periods\n    AS\n    (\n        SELECT\n            valid_load_timestamp\n    , COALESCE(lag(valid_load_timestamp) OVER (PARTITION BY 1 ORDER BY valid_load_timestamp DESC), '991231_0000') valid_to\n        FROM\n            (\n    SELECT DISTINCT valid_load_timestamp\n            FROM valid_rl_target_curves\n  )\n    )\nSELECT\n    target_key\n  , load_name\n  , load_timestamp\n  , extreme_lower\n  , mid_lower\n  , mid_upper\n  , extreme_upper\n  , expectedlf_rescaled\n  , tc.valid_load_timestamp valid_from\n  , pr.valid_to valid_to\n  , ('991231_0000' = pr\n.valid_to) active\nFROM\n(\n  valid_rl_target_curves tc\n  INNER JOIN periods pr ON\n(pr.valid_load_timestamp = tc.valid_load_timestamp))"
    },
    "fr-bi-dpfa-seats": {
        "aws_query.sql": " with future_flights as(\n  select inventorylegid, departuredate, flightnumber, departurestation, arrivalstation from navitaire_prod.inventoryleg\n  where concat(departurestation, arrivalstation) in ($testRoutes)  -- SET ROUTES\n    and cast(stdutc as timestamp) > cast(current_timestamp as timestamp)\n    and status = 0 -- status 0 is for all flights still going\n    ),\n most_recent_scrape as (\n    SELECT fpu.flightnumber , cast(fpu.departure AS DATE) AS departure , max(fpu.priceupdated) AS most_recent_scrape\n    FROM farefinder_logger_prod.farefinder_price_updates fpu\n    WHERE concat(departureairport, arrivalairport) in ($testRoutes) -- SET ROUTES\n        AND departure > current_timestamp\n    GROUP BY fpu.flightnumber , cast(fpu.departure AS DATE)\n    ORDER BY flightnumber , departure\n    ) ,\n full_details as (\n    SELECT mrs.flightnumber , fpu.departureairport, fpu.arrivalairport, fpu.departure, fpu.priceeur, fpu.priceupdated\n    FROM most_recent_scrape mrs\n    JOIN farefinder_logger_prod.farefinder_price_updates fpu\n        ON mrs.flightnumber = fpu.flightnumber\n            AND cast(mrs.departure AS DATE) = cast(fpu.departure AS DATE)\n            AND mrs.most_recent_scrape = fpu.priceupdated\n    )\nSELECT *\nFROM (\n    SELECT ff.inventorylegid AS InventoryLegID\n        , fd.priceeur AS FlightChargesEUR_unit\n    FROM full_details fd\n    JOIN future_flights ff\n        ON fd.departureairport = ff.departurestation\n            AND fd.arrivalairport = ff.arrivalstation\n            AND substring(fd.flightnumber, 3, 4) = ff.flightnumber\n            AND cast(fd.departure AS DATE) = cast(ff.departuredate AS DATE)\n    )\nORDER BY InventoryLegID\n",
        "aws_query_v2.sql": "WITH future_flights\nAS (\n    SELECT inventorylegid\n        , departuredate\n        , flightnumber\n        , departurestation\n        , arrivalstation\n    FROM navitaire_prod.inventoryleg\n    WHERE cast(stdutc AS TIMESTAMP) > cast(current_timestamp AS TIMESTAMP)\n        AND STATUS = 0 -- status 0 is for all flights still going\n        AND concat(departurestation, arrivalstation) in ('NAPCRL') -- SET ROUTES\n    )\n    , most_recent_scrape\nAS (\n    SELECT fpu.flightnumber\n        , cast(fpu.departure AS DATE) AS departure\n        , max(fpu.priceupdated) AS most_recent_scrape\n    FROM farefinder_logger_prod.farefinder_price_updates fpu\n    WHERE departure > current_timestamp\n    AND concat(departureairport, arrivalairport) in ('NAPCRL') -- SET ROUTES\n    GROUP BY fpu.flightnumber\n        , cast(fpu.departure AS DATE)\n    ORDER BY flightnumber\n        , departure\n    )\n    , full_details\nAS (\n    SELECT mrs.flightnumber\n        , fpu.departureairport\n        , fpu.arrivalairport\n        , fpu.departure\n        , fpu.priceeur\n        , fpu.priceupdated\n    FROM most_recent_scrape mrs\n    JOIN farefinder_logger_prod.farefinder_price_updates fpu\n        ON mrs.flightnumber = fpu.flightnumber\n            AND cast(mrs.departure AS DATE) = cast(fpu.departure AS DATE)\n            AND mrs.most_recent_scrape = fpu.priceupdated\n    )\nSELECT DISTINCT a.InventoryLegID AS InventoryLegID\n    , max(a.FlightChargesEUR_unit) AS FlightChargesEur_unit\nFROM (\n    -- adding MAX function to remove the small number of cases with two prices resulting from one particular scrape timestamp\n    SELECT ff.inventorylegid AS InventoryLegID\n        , fd.priceeur AS FlightChargesEUR_unit\n    FROM full_details fd\n    JOIN future_flights ff\n        ON fd.departureairport = ff.departurestation\n            AND fd.arrivalairport = ff.arrivalstation\n            AND substring(fd.flightnumber, 3, 4) = ff.flightnumber\n            AND cast(fd.departure AS DATE) = cast(ff.departuredate AS DATE)\n  WHERE ff.departuredate <= '2021-11-30'\n    ) a\nWHERE SUBSTR(CAST(InventoryLegID AS VARCHAR(20)), -1) != '4' AND SUBSTR(CAST(InventoryLegID AS VARCHAR(20)), -1) != '3'\nGROUP BY a.inventorylegid\nORDER BY a.inventorylegid\n"
    },
    "ancillary-dynpricing-lambda-data-sync": {
        "query_2.sql": "DECLARE @startdatesk BIGINT = 20230602,\n            @enddatesk   BIGINT = 20230731;\nWITH\n    sold\n    AS\n    (\n        SELECT\n            il.InventoryLegSK\n              --,CAST(il.InventoryLegNK AS BIGINT) AS InventoryLegID\n              , il.InventoryLegNK AS InventoryLegID\n              , fr.BookingSK\n              , fr.DateSK\n              , bk.BookingDateTimeUTC\n                --, FORMAT(il.DepartureDateTimeLocal, 'yyyyMM') DepYYMM,\n                , SUM( CASE\n                           WHEN ds.ServiceCategory IN ( 'Flight', 'Business Plus', 'Leisure Plus' )\n                                --AND ds.ServiceClass NOT IN ( 'X', 'Z' )\n                           THEN fr.TotalFeeUnits\n                           ELSE 0\n                       END\n                   )                                        AS Passengers\n            -- 20 KG\n            , SUM(CASE WHEN ds.ServiceNK = 'BBG1' THEN fr.TotalFeeUnits ELSE 0 END) as [20KGBagUnitsSold]\n            , SUM(CASE WHEN ds.ServiceNK = 'BBG1' THEN fr.TotalChargesEUR ELSE 0 END) as [20KGBagChargesEUR]\n            -- 10 KG\n            , SUM(CASE WHEN ds.ServiceNK = 'CBAG' THEN fr.TotalFeeUnits ELSE 0 END) as [10KGBagUnitsSold]\n            , SUM(CASE WHEN ds.ServiceNK = 'CBAG' THEN fr.TotalChargesEUR ELSE 0 END) as [10KGBagChargesEUR]\n            -- Priority Boarding\n            , SUM(CASE WHEN ds.ServiceNK in ('PS', 'PB', 'PF', 'MPS') THEN fr.TotalFeeUnits ELSE 0 END) as PBUnitsSold\n            , SUM(CASE WHEN ds.ServiceNK in ('PS', 'PB', 'PF', 'MPS') THEN fr.TotalChargesEUR ELSE 0 END) as PBChargesEUR\n        FROM\n            revenue_rpt.FactRevenue          fr\n            JOIN revenue_rpt.DimService      ds ON fr.ServiceSK = ds.ServiceSK\n            JOIN revenue_rpt.DimChargeLifeStage ls ON fr.ChargeLifeStageSK = ls.ChargeLifeStageSK\n            JOIN revenue_rpt.DimInventoryLeg il ON il.InventoryLegSK = fr.InventoryLegSK\n            LEFT JOIN revenue_rpt.[DimBooking] bk ON bk.BookingSK = fr.BookingSK\n        WHERE\n                (ds.ServiceCategory IN ( 'Flight', 'Business Plus', 'Leisure Plus' )\n            OR ds.ServiceNK IN ('PS', 'PB', 'PF', 'MPS', 'BBG1','CBAG'))\n            AND fr.DateSK\n                BETWEEN @startdatesk AND @enddatesk\n            AND il.CarrierCode NOT IN ( 'RR' )\n            AND ChargeStageGroup = 'Trip'\n            AND DepartureCountry != 'Spain'\n            AND ArrivalCountry != 'Spain'\n        --AND il.InventoryLegSK = 10699647\n        GROUP BY\n                il.InventoryLegSK\n               ,il.InventoryLegNK\n               ,fr.BookingSK\n               ,fr.DateSK\n               ,bk.BookingDateTimeUTC\n    ),\n    maxbag10kg\n    AS\n    (\n        SELECT a.InventoryLegSK, MAX(a.ModelDate) AS ModelDate, sold.DateSK\n        FROM sold\n            JOIN [datascience_rpt].[vw_AncDynPricing_CBAGPredictionsSnapshots] a\n            ON a.InventoryLegSK = sold.InventoryLegSK\n                AND a.[Trip Type] = 'POTENTIAL'\n                AND a.ModelDate <= convert(DATE, convert(VARCHAR,sold.DateSK, 112))\n        GROUP BY a.InventoryLegSK,sold.DateSK\n    ),\n    maxbag20kg\n    AS\n    (\n        SELECT a.InventoryLegID, MAX(a.ModelFromDatetime) AS ModelFromDatetime, sold.BookingDateTimeUTC\n        FROM sold\n            JOIN [datascience].[dbo_AncDynPricing_20kgPredictionsVersion] a\n            ON a.InventoryLegID = sold.InventoryLegID\n                AND a.[TripType] = 'POTENTIAL'\n                and a.ModelFromDatetime <= sold.BookingDateTimeUTC\n        GROUP BY a.InventoryLegID,sold.BookingDateTimeUTC\n    ),\n    ww\n    AS\n    (\n        SELECT\n            sold.InventoryLegSK\n             , sold.InventoryLegID\n             , sold.BookingSK\n             , sold.DateSK\n             , sold.BookingDateTimeUTC\n             , sold.Passengers\n             , sold.[20KGBagUnitsSold]\n             , sold.[20KGBagChargesEUR]\n             , sold.[10KGBagUnitsSold]\n             , sold.[10KGBagChargesEUR]\n             , sold.PBUnitsSold\n             , sold.PBChargesEUR\n             , pb.model_prices AS PB_model_price\n             , (CASE WHEN bag10kg.ModelPrices < 0.45 * pr.ModelPrices THEN CEILING((0.45 *(pr.ModelPrices))/0.5)*0.5\n             WHEN bag10kg.ModelPrices > 0.85 * pr.ModelPrices THEN CEILING((0.85 * pr.ModelPrices)/0.5)*0.5\n             ELSE CEILING(bag10kg.ModelPrices/0.5)*0.5 END) AS bag10kg_model_price\n             , pr.ModelPrices AS bag20kg_model_price\n        FROM sold\n            JOIN [datascience_rpt].[vw_AncDynPricing_PBPredictionsSnapshots] pb\n            ON pb.[Trip Type] = 'POTENTIAL'\n                AND sold.InventoryLegSK = pb.InventoryLegSK\n                AND CONVERT(DATE, CONVERT(VARCHAR,sold.DateSK, 112)) = pb.ModelDate\n\n            JOIN maxbag10kg ON maxbag10kg.InventoryLegSK = sold.InventoryLegSK AND maxbag10kg.DateSK = sold.DateSK\n\n            JOIN ( SELECT InventoryLegSK, ModelDate, MAX(ModelPrices)  AS ModelPrices\n            FROM [datascience_rpt].[vw_AncDynPricing_CBAGPredictionsSnapshots]\n            --dups here/need max value\n            WHERE [Trip Type] = 'POTENTIAL'\n            GROUP BY InventoryLegSK, ModelDate) bag10kg\n            ON maxbag10kg.InventoryLegSK = bag10kg.InventoryLegSK\n                AND bag10kg.ModelDate = maxbag10kg.ModelDate\n\n            JOIN maxbag20kg ON maxbag20kg.InventoryLegID = sold.InventoryLegID AND maxbag20kg.BookingDateTimeUTC = sold.BookingDateTimeUTC\n\n            JOIN ( SELECT InventoryLegID, ModelFromDatetime, MAX(ModelPrices) AS ModelPrices\n            FROM [datascience].[dbo_AncDynPricing_20kgPredictionsVersion]\n            WHERE [TripType] = 'POTENTIAL'\n            GROUP BY InventoryLegID, ModelFromDatetime) pr\n            ON maxbag20kg.InventoryLegID = pr.InventoryLegID\n                AND maxbag20kg.ModelFromDatetime = pr.ModelFromDatetime\n    )\n\n(select\n    PB_model_price - bag10kg_model_price AS PB_10KG\n    , PB_model_price - bag20kg_model_price AS PB_20KG\n    , bag10kg_model_price - bag20kg_model_price AS bag10KG_20KG\n    , sum(Passengers) AS PAX\n    , sum(PBUnitsSold) AS Units_PB\n    , sum(PBChargesEUR) AS Revenue_PB\n    , SUM(PBUnitsSold) / SUM(Passengers) AS Conv_PB\n    , SUM(PBChargesEUR)/NULLIF(SUM(Passengers), 0) AS RPP_PB\n    , sum([10KGBagUnitsSold]) AS Units_10KG\n    , sum([10KGBagChargesEUR]) AS Revenue_10KG\n    , SUM([10KGBagUnitsSold]) / SUM(Passengers) AS Conv_10KG\n    , SUM([10KGBagChargesEUR])/NULLIF(SUM(Passengers), 0) AS RPP_10KG\n    , sum([20KGBagUnitsSold]) AS Units_20KG\n    , sum([20KGBagChargesEUR]) as Revenue_20KG\n    , SUM([20KGBagUnitsSold]) / SUM(Passengers) AS Conv_20KG\n    , SUM([20KGBagChargesEUR])/NULLIF(SUM(Passengers), 0) AS RPP_20KG\n    , SUM(PBUnitsSold + [10KGBagUnitsSold] + [20KGBagUnitsSold])/SUM(Passengers)   AS Combined_Conv\n    , SUM(PBChargesEUR + [10KGBagChargesEUR] + [20KGBagChargesEUR])/SUM(Passengers) AS Combined_RPP\nfrom ww\nwhere PB_model_price is not null and bag10kg_model_price is not null and bag20kg_model_price is not null\ngroup by PB_model_price - bag10kg_model_price, PB_model_price - bag20kg_model_price,bag10kg_model_price - bag20kg_model_price)\nORDER BY SUM(PBChargesEUR + [10KGBagChargesEUR] + [20KGBagChargesEUR])/SUM(Passengers) desc, SUM(PBUnitsSold + [10KGBagUnitsSold] + [20KGBagUnitsSold])/SUM(Passengers) desc",
        "query_1.sql": "DECLARE @startdatesk BIGINT = 20230602,\n            @enddatesk   BIGINT = 20230731;\n    WITH sold AS\n        (\n            SELECT\n              il.InventoryLegSK\n              --,CAST(il.InventoryLegNK AS BIGINT) AS InventoryLegID\n              ,il.InventoryLegNK AS InventoryLegID\n              ,fr.BookingSK\n              ,fr.DateSK\n              ,bk.BookingDateTimeUTC\n                --, FORMAT(il.DepartureDateTimeLocal, 'yyyyMM') DepYYMM,\n                ,SUM( CASE\n                           WHEN ds.ServiceCategory IN ( 'Flight', 'Business Plus', 'Leisure Plus' )\n                                --AND ds.ServiceClass NOT IN ( 'X', 'Z' )\n                           THEN fr.TotalFeeUnits\n                           ELSE 0\n                       END\n                   )                                        AS Passengers\n            -- 20 KG\n            ,SUM(CASE WHEN ds.ServiceNK = 'BBG1' THEN fr.TotalFeeUnits ELSE 0 END) as [20KGBagUnitsSold]\n            ,SUM(CASE WHEN ds.ServiceNK = 'BBG1' THEN fr.TotalChargesEUR ELSE 0 END) as [20KGBagChargesEUR]\n            -- 10 KG\n            ,SUM(CASE WHEN ds.ServiceNK = 'CBAG' THEN fr.TotalFeeUnits ELSE 0 END) as [10KGBagUnitsSold]\n            ,SUM(CASE WHEN ds.ServiceNK = 'CBAG' THEN fr.TotalChargesEUR ELSE 0 END) as [10KGBagChargesEUR]\n            -- Priority Boarding\n            ,SUM(CASE WHEN ds.ServiceNK in ('PS', 'PB', 'PF', 'MPS') THEN fr.TotalFeeUnits ELSE 0 END) as PBUnitsSold\n            ,SUM(CASE WHEN ds.ServiceNK in ('PS', 'PB', 'PF', 'MPS') THEN fr.TotalChargesEUR ELSE 0 END) as PBChargesEUR\n            FROM\n                revenue_rpt.FactRevenue          fr\n                JOIN revenue_rpt.DimService      ds ON fr.ServiceSK = ds.ServiceSK\n                JOIN revenue_rpt.DimChargeLifeStage ls ON fr.ChargeLifeStageSK = ls.ChargeLifeStageSK\n                JOIN revenue_rpt.DimInventoryLeg il ON il.InventoryLegSK = fr.InventoryLegSK\n                LEFT JOIN revenue_rpt.[DimBooking] bk  ON bk.BookingSK = fr.BookingSK\n            WHERE\n                (ds.ServiceCategory IN ( 'Flight', 'Business Plus', 'Leisure Plus' )\n                OR ds.ServiceNK IN ('PS', 'PB', 'PF', 'MPS', 'BBG1','CBAG'))\n                AND fr.DateSK\n                BETWEEN @startdatesk AND @enddatesk\n                AND il.CarrierCode NOT IN ( 'RR' )\n                AND ChargeStageGroup = 'Trip'\n                 AND DepartureCountry != 'Spain'\n                 AND ArrivalCountry != 'Spain'\n                 --AND il.InventoryLegSK = 10699647\n            GROUP BY\n                il.InventoryLegSK\n               ,il.InventoryLegNK\n               ,fr.BookingSK\n               ,fr.DateSK\n               ,bk.BookingDateTimeUTC\n        ),\n        maxbag10kg AS\n        (\n            SELECT a.InventoryLegSK,MAX(a.ModelDate) AS ModelDate,sold.DateSK\n            FROM sold\n            JOIN [datascience_rpt].[vw_AncDynPricing_CBAGPredictionsSnapshots] a\n            ON a.InventoryLegSK = sold.InventoryLegSK\n            AND a.[Trip Type] = 'POTENTIAL'\n            AND a.ModelDate <= convert(DATE, convert(VARCHAR,sold.DateSK, 112))\n            GROUP BY a.InventoryLegSK,sold.DateSK\n        ),\n        maxbag20kg AS\n        (\n            SELECT a.InventoryLegID,MAX(a.ModelFromDatetime) AS ModelFromDatetime,sold.BookingDateTimeUTC\n            FROM sold\n            JOIN [datascience].[dbo_AncDynPricing_20kgPredictionsVersion] a\n            ON a.InventoryLegID = sold.InventoryLegID\n            AND a.[TripType] = 'POTENTIAL'\n            and a.ModelFromDatetime <= sold.BookingDateTimeUTC\n            GROUP BY a.InventoryLegID,sold.BookingDateTimeUTC\n        ),\n        ww AS\n        (\n            SELECT\n              sold.InventoryLegSK\n             ,sold.InventoryLegID\n             ,sold.BookingSK\n             ,sold.DateSK\n             ,sold.BookingDateTimeUTC\n             ,sold.Passengers\n             ,sold.[20KGBagUnitsSold]\n             ,sold.[20KGBagChargesEUR]\n             ,sold.[10KGBagUnitsSold]\n             ,sold.[10KGBagChargesEUR]\n             ,sold.PBUnitsSold\n             ,sold.PBChargesEUR\n             ,pb.model_prices AS PB_model_price\n             ,(CASE WHEN bag10kg.ModelPrices < 0.45 * pr.ModelPrices THEN CEILING((0.45 *(pr.ModelPrices))/0.5)*0.5\n             WHEN bag10kg.ModelPrices > 0.85 * pr.ModelPrices THEN CEILING((0.85 * pr.ModelPrices)/0.5)*0.5\n             ELSE CEILING(bag10kg.ModelPrices/0.5)*0.5 END) AS bag10kg_model_price\n             ,pr.ModelPrices AS bag20kg_model_price\n             FROM sold\n             JOIN [datascience_rpt].[vw_AncDynPricing_PBPredictionsSnapshots] pb\n                      ON pb.[Trip Type] = 'POTENTIAL'\n                     AND sold.InventoryLegSK = pb.InventoryLegSK\n                     AND CONVERT(DATE, CONVERT(VARCHAR,sold.DateSK, 112)) = pb.ModelDate\n\n             JOIN  maxbag10kg ON maxbag10kg.InventoryLegSK = sold.InventoryLegSK AND maxbag10kg.DateSK = sold.DateSK\n\n             JOIN ( SELECT InventoryLegSK, ModelDate, MAX(ModelPrices)  AS ModelPrices\n                            FROM  [datascience_rpt].[vw_AncDynPricing_CBAGPredictionsSnapshots] --dups here/need max value\n                            WHERE [Trip Type] = 'POTENTIAL'\n                            GROUP BY InventoryLegSK, ModelDate) bag10kg\n                            ON maxbag10kg.InventoryLegSK = bag10kg.InventoryLegSK\n                            AND bag10kg.ModelDate = maxbag10kg.ModelDate\n\n             JOIN  maxbag20kg ON maxbag20kg.InventoryLegID = sold.InventoryLegID AND maxbag20kg.BookingDateTimeUTC = sold.BookingDateTimeUTC\n\n             JOIN ( SELECT InventoryLegID, ModelFromDatetime, MAX(ModelPrices) AS ModelPrices\n                            FROM  [datascience].[dbo_AncDynPricing_20kgPredictionsVersion]\n                            WHERE [TripType] = 'POTENTIAL'\n                            GROUP BY InventoryLegID, ModelFromDatetime) pr\n                            ON maxbag20kg.InventoryLegID = pr.InventoryLegID\n                            AND maxbag20kg.ModelFromDatetime = pr.ModelFromDatetime\n    )\n\n    (SELECT PB_model_price\n    ,bag10kg_model_price\n    ,bag20kg_model_price\n    ,SUM(Passengers) AS PAX\n    ,SUM(PBUnitsSold) AS Units_PB\n    ,SUM(PBChargesEUR) AS Revenue_PB\n    ,SUM(PBUnitsSold) / SUM(Passengers) AS Conv_PB\n    ,SUM(PBChargesEUR)/NULLIF(SUM(Passengers), 0) AS RPP_PB\n    ,SUM([10KGBagUnitsSold]) AS Units_10KG\n    ,SUM([10KGBagChargesEUR]) AS Revenue_10KG\n    ,SUM([10KGBagUnitsSold]) / SUM(Passengers) AS Conv_10KG\n    ,SUM([10KGBagChargesEUR])/NULLIF(SUM(Passengers), 0) AS RPP_10KG\n    ,SUM([20KGBagUnitsSold]) AS Units_20KG\n    ,SUM([20KGBagChargesEUR]) AS Revenue_20KG\n    ,SUM([20KGBagUnitsSold]) / SUM(Passengers) AS Conv_20KG\n    ,SUM([20KGBagChargesEUR])/NULLIF(SUM(Passengers), 0) AS RPP_20KG\n    ,SUM(PBUnitsSold + [10KGBagUnitsSold] + [20KGBagUnitsSold])/SUM(Passengers)   AS Combined_Conv\n    ,SUM(PBChargesEUR + [10KGBagChargesEUR] + [20KGBagChargesEUR])/SUM(Passengers) AS Combined_RPP\n    from ww\n    where PB_model_price is not null and bag10kg_model_price is not null and bag20kg_model_price is not null\n    group by PB_model_price, bag10kg_model_price, bag20kg_model_price)\n    --ORDER BY 2 DESC,3 DESC,1 DESC\n    ORDER BY SUM(PBChargesEUR + [10KGBagChargesEUR] + [20KGBagChargesEUR])/SUM(Passengers) desc, SUM(PBUnitsSold + [10KGBagUnitsSold] + [20KGBagUnitsSold])/SUM(Passengers) desc"
    }
}